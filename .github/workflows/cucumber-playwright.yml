name: Azulzinha - CNJ Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tags:
        description: 'Tags para rodar os testes'
        required: false
        default: ''
  schedule:
    - cron: "0 11 * * 1-5"

permissions:
  contents: write
  pages: write

jobs:
  test:
    timeout-minutes: 60  
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and Playwright
        run: |
          npx playwright install --with-deps
          npm ci

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright Browsers (Chromium)
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-chromium-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-chromium-
      
      - name: Install Google Chrome for Playwright
        run: npx playwright install chromium --with-deps

      - name: Ensure test-results directory exists
        run: mkdir -p test-results

      - name: Ensure .env file is available
        run: |
          mkdir -p helper/env
          cat <<EOF > helper/env/.env.test
          USER_NAME=${{ secrets.USER_NAME }}
          PASSWORD=${{ secrets.PASSWORD }}
          BASEURL=${{ secrets.BASEURL }}
          RESOURCE_PATH_DEPOSITO_JUDICIAL=${{ secrets.RESOURCE_PATH_DEPOSITO_JUDICIAL }}
          ENV=test
          EOF

      - name: Run Cucumber tests
        env:
          BASEURL: ${{ secrets.BASEURL }}
          RESOURCE_PATH_DEPOSITO_JUDICIAL: ${{ secrets.RESOURCE_PATH_DEPOSITO_JUDICIAL }}
          ENV: test
          npm_config_TAGS: "${{ github.event.inputs.tags }}"
        run: |
          TAGS_OPTION=""
          if [[ -n "${{ github.event.inputs.tags }}" ]]; then
            TAGS_OPTION="--TAGS=${{ github.event.inputs.tags }}"
          fi
          
          npm test $TAGS_OPTION --exit | tee output.log
          
          if grep -q "failed" output.log; then
            echo "Testes falharam!"
            exit 1
          fi

      - name: Criar ou reabrir bug no ClickUp para cada cen√°rio com falha
        if: failure()
        run: |
          echo "üîç Buscando cen√°rios com falha no relat√≥rio JSON..."
        
          readarray -t FAILED_SCENARIOS < <(jq -r '.[]?.elements[]? | select(.steps[].result.status=="failed") | .name' test-results/cucumber-report.json | sort -u)
        
          if [ ${#FAILED_SCENARIOS[@]} -eq 0 ]; then
            echo "‚úÖ Nenhum cen√°rio com falha encontrado."
            exit 0
          fi
        
          for SCENARIO in "${FAILED_SCENARIOS[@]}"; do
            echo "üîç Verificando tarefas existentes para: $SCENARIO"
        
            EXISTING_TASKS=$(curl -s -G "https://api.clickup.com/api/v2/list/${{ secrets.CLICKUP_LIST_ID }}/task" \
              --data-urlencode "search=$SCENARIO" \
              --data-urlencode "include_closed=true" \
              -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" \
              -H "Content-Type: application/json")
        
            MATCHING_TASK=$(echo "$EXISTING_TASKS" | jq -r --arg scenario "$SCENARIO" '
              .tasks[] | select(.name | test($scenario)) | {id: .id, status: .status.status}')
        
            MATCHING_TASK_ID=$(echo "$MATCHING_TASK" | jq -r '.id')
            MATCHING_TASK_STATUS=$(echo "$MATCHING_TASK" | jq -r '.status')
        
            if [ -n "$MATCHING_TASK_ID" ]; then
              echo "üîé Tarefa encontrada: ID=$MATCHING_TASK_ID com status=$MATCHING_TASK_STATUS"
        
              # Alterar status para backlog se estiver em "in uat" ou "Closed"
              if [[ "$MATCHING_TASK_STATUS" == "Closed" || "$MATCHING_TASK_STATUS" == "in uat" ]]; then
                echo "‚ôªÔ∏è Alterando status para BACKLOG..."
                curl -s -X PUT "https://api.clickup.com/api/v2/task/$MATCHING_TASK_ID" \
                  -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  -d '{"status": "backlog"}'
        
                echo "üí¨ Adicionando coment√°rio com o passo que falhou..."
        
                FAILED_STEP=$(jq -r --arg scenario "$SCENARIO" '
                  .[]?.elements[]?
                  | select(.name == $scenario)
                  | .steps[]
                  | select(.result.status == "failed")
                  | .keyword + .name + " üí• " + (.result.error_message // "Erro n√£o especificado")' test-results/cucumber-report.json)
        
                COMMENT_TEXT=$(printf "üîÑ Bug reaberto no pipeline.\n\nüìã Passo que falhou:\n%s" "$FAILED_STEP")
        
                curl -s -X POST "https://api.clickup.com/api/v2/task/$MATCHING_TASK_ID/comment" \
                  -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  -d "$(jq -n --arg text "$COMMENT_TEXT" '{ notify_all: true, comment_text: $text }')"
        
              else
                echo "‚ö†Ô∏è Bug j√° existe com status ativo ($MATCHING_TASK_STATUS) ‚Äì sem altera√ß√µes."
                continue
              fi
        
            else
              echo "üêû Nenhuma tarefa encontrada ‚Äì criando nova para o cen√°rio: $SCENARIO"
        
              STEPS=$(jq -r --arg scenario "$SCENARIO" '
                .[]?.elements[]?
                | select(.name == $scenario)
                | .steps[]
                | "- " + .keyword + .name + " (" + .result.status + ")"
                  + (if .result.error_message then "\n  üí• " + (.result.error_message | gsub("\n"; " ") | gsub("\r"; "")) else "" end)' test-results/cucumber-report.json)
        
              DESCRIPTION=$(printf "Falha no cen√°rio automatizado: \"%s\"\n\nüîó Workflow: %s/%s/actions/runs/%s\n\nüìã Passos:\n%s" \
                "$SCENARIO" "${{ github.server_url }}" "${{ github.repository }}" "${{ github.run_id }}" "$STEPS")
        
              echo "üìù Criando nova tarefa no ClickUp..."
              NEW_TASK_RESPONSE=$(curl -s -X POST "https://api.clickup.com/api/v2/list/${{ secrets.CLICKUP_LIST_ID }}/task" \
                -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d "$(jq -n \
                  --arg name "üêû CI Fail : $SCENARIO" \
                  --arg description "$DESCRIPTION" \
                  '{
                    name: $name,
                    description: $description,
                    status: "backlog",
                    priority: 3,
                    custom_item_id: 1003
                  }')")
        
              NEW_TASK_ID=$(echo "$NEW_TASK_RESPONSE" | jq -r '.id')
        
              if [ -f test-results/cucumber-report.html ]; then
                echo "üìé Anexando cucumber-report.html √† tarefa $NEW_TASK_ID..."
                curl -s -X POST "https://api.clickup.com/api/v2/task/$NEW_TASK_ID/attachment" \
                  -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" \
                  -F "attachment=@test-results/cucumber-report.html"
              else
                echo "‚ö†Ô∏è Arquivo cucumber-report.html n√£o encontrado ‚Äì pulando anexo."
              fi
            fi
          done        

      - name: Debug CLICKUP_TEST_LIST_ID e token
        # para garantir que execute sempre, use a express√£o correta:
        if: ${{ always() }}
        run: |
          echo "‚ñ∂Ô∏è CLICKUP_TEST_LIST_ID = ${{ secrets.CLICKUP_TEST_LIST_ID }}"
          echo "‚ñ∂Ô∏è CLICKUP_API_TOKEN     = ${{ secrets.CLICKUP_API_TOKEN }}"

      - name: Check List exists
        if: ${{ always() }}
        env:
          CLICKUP_TOKEN: ${{ secrets.CLICKUP_API_TOKEN }}
          LIST_ID:      ${{ secrets.CLICKUP_TEST_LIST_ID }}
        run: |
          echo "üîé Verificando lista $LIST_ID..."
          curl -i -H "Authorization: $CLICKUP_TOKEN" \
            "https://api.clickup.com/api/v2/list/$LIST_ID"

      - name: Reportar Test Scenarios no ClickUp
        if: ${{ always() }}
        env:
          CLICKUP_TOKEN:  ${{ secrets.CLICKUP_API_TOKEN }}
          LIST_ID:        ${{ secrets.CLICKUP_TEST_LIST_ID }}
        run: |
          echo "üîç Reportando Test Scenarios..."
          mkdir -p tmp
          > tmp/scenario_ids.csv
          
          readarray -t FEATURES < <(jq -r '.[].name' test-results/cucumber-report.json | sort -u)
          for FEATURE in "${FEATURES[@]}"; do
            if jq -e --arg f "$FEATURE" '.[] | select(.name==$f) | .elements[].steps[].result.status=="failed"' test-results/cucumber-report.json >/dev/null; then
              STATUS="rejected"
            else
              STATUS="test complete"
            fi
          
            echo "üìã Criando Test Scenario: $FEATURE ‚Üí $STATUS"
            RESPONSE=$(curl -s -X POST "https://api.clickup.com/api/v2/list/$LIST_ID/task" \
              -H "Authorization: $CLICKUP_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$(jq -n \
                    --arg name "Test Scenario: $FEATURE" \
                    --arg description "Feature \"$FEATURE\": $STATUS." \
                    --arg status "$STATUS" \
                    '{
                      name: $name,
                      description: $description,
                      status: $status,
                      custom_item_id: 1007
                    }')")
                
            SCENARIO_ID=$(echo "$RESPONSE" | jq -r '.id')
            # grava mapping FEATURE ‚Üí ID
            echo "${FEATURE}|${SCENARIO_ID}" >> tmp/scenario_ids.csv
          done               
  
      - name: Reportar Test Cases no ClickUp
        if: ${{ always() }}
        env:
          CLICKUP_TOKEN: ${{ secrets.CLICKUP_API_TOKEN }}
          LIST_ID:       ${{ secrets.CLICKUP_TEST_LIST_ID }}
        run: |
          echo "üîç Reportando Test Cases como subtasks‚Ä¶"
          declare -A PARENT
  
          # 1) Carrega FEATURE ‚Üí PARENT_ID criados no passo anterior
          while IFS='|' read -r FEATURE ID; do
            PARENT["$FEATURE"]=$ID
          done < tmp/scenario_ids.csv
  
          # 2) Lista todos os cen√°rios
          readarray -t SCENARIOS < <(jq -r '.[].elements[].name' test-results/cucumber-report.json | sort -u)
  
          for SCENARIO in "${SCENARIOS[@]}"; do
            # 3) Acha a feature-pai via jq
            FEATURE=$(jq -r --arg s "$SCENARIO" '
              .[] 
              | select([.elements[].name] | index($s)) 
              | .name
            ' test-results/cucumber-report.json)
  
            PARENT_ID=${PARENT["$FEATURE"]}
  
            if [ -z "$PARENT_ID" ]; then
              echo "‚ö†Ô∏è Pai n√£o encontrado para $SCENARIO (feature: $FEATURE), pulando."
              continue
            fi
  
            # 4) Status do cen√°rio
            if jq -e --arg s "$SCENARIO" '.[] | .elements[] | select(.name==$s) | .steps[].result.status=="failed"' test-results/cucumber-report.json >/dev/null; then
              STATUS="rejected"
            else
              STATUS="test complete"
            fi
  
            echo "üìã Criando Subtask Test Case: $SCENARIO ‚Üí $STATUS (parent: $PARENT_ID)"
            curl -s -X POST "https://api.clickup.com/api/v2/list/$LIST_ID/task" \
              -H "Authorization: $CLICKUP_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$(jq -n \
                    --arg name        "Test Case: $SCENARIO" \
                    --arg description "Cen√°rio \"$SCENARIO\": $STATUS." \
                    --arg status      "$STATUS" \
                    --arg parent      "$PARENT_ID" \
                    '{
                      name: $name,
                      description: $description,
                      status: $status,
                      parent: $parent,
                      custom_item_id: 1008
                    }')"
          done  

  #     - name: Upload Cucumber Test Report
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: cucumber-test-report
  #         path: test-results
  #         retention-days: 5

  # deploy-report:
  #   needs: test
  #   if: always()
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - name: Download Test Report
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: cucumber-test-report
  #         path: test-results

  #     - name: Rename Cucumber Report to index.html (if exists)
  #       run: |
  #         if [ -f test-results/cucumber-report.html ]; then
  #           cp test-results/cucumber-report.html test-results/index.html
  #         else
  #           echo "Arquivo cucumber-report.html n√£o encontrado. Pulando renomea√ß√£o."
  #         fi

  #     - name: Ensure JSON is accessible
  #       run: |
  #         if [ -f test-results/cucumber-report.json ]; then
  #           cp test-results/cucumber-report.json test-results/report.json
  #         else
  #           echo "Arquivo cucumber-report.json n√£o encontrado."
  #         fi

  #     - name: Deploy to GitHub Pages
  #       uses: peaceiris/actions-gh-pages@v4
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         publish_dir: test-results
  #         publish_branch: gh-pages
  #         force_orphan: true
  #         keep_files: true
